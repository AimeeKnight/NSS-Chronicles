#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"
$LOAD_PATH << "controllers"

require 'environment'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

require 'cohort'
require 'cohorts'
require 'student'
require 'project'

def menu
<<EOS
What do you want to do?
1. Add Cohort
2. Show Cohorts
3. Add Student
4. Show Students
5. Add Project
6. Show Projects
EOS
end

#################### COHORT ####################
def add_cohort
  puts "Please enter the cohort as: title, language 1/language 2, term"
  puts "or press enter to return to the main menu"
  input = format_input
  cohort = Cohort.new(input[0], input[1], input[2])
  if cohort.save
    puts "#{input[0]} has been added."
  else
    puts cohort.errors
    add_cohort
  end
end

def show_cohorts
  header_to_s("cohorts")
  Cohort.all.map { |cohort| puts "#{cohort.to_s}"}
end

#################### STUDENT #################### 
def add_student
  puts "Please enter the student as first name, last name, cohort id"
  puts "or press enter to return to the main menu"
  input = format_input
  student = Student.new(input[0], input[1], input[2])
  if student.save
    puts "#{input[0]} has been added."
  else
    puts student.errors
    add_student
  end
end

def show_students
  puts "Please enter a grouping: <cohort>, <alumni>, <current>, <all> or, press enter to return to the main menu"
  student_selection = gets
  return unless student_selection
  case student_selection.chomp!
  when "cohort"
    puts "please enter the cohort id, or press enter to return to the main menu"
    cohort_id = gets
    return unless cohort_id
    if cohort_id.chomp! == ""
      get_menu_selection
    else
      cohort = Cohort.find_by_id(cohort_id.chomp)
      if cohort.nil?
        puts "No records found for #{cohort}"
        return
      end
      header_to_s("#{cohort.title} students")
      Student.for_cohort(cohort).map { |student| puts "#{student.to_s}" }
    end
  when "alumni"
    header_to_s("alumni")
    Student.alumni.map { |student| puts "#{student.to_s}" }
  when "current"
    header_to_s("current students")
    Student.current.map { |student| puts "#{student.to_s}" }
  when "all"
    header_to_s("students")
    Student.all.map { |student| puts "#{student.to_s}"}
  else
    get_menu_selection
  end
end

#################### PROJECT ####################
def add_project
  puts "Please enter the project as: title, primary language, student id, github url, hosted url"
  input = format_input
  project = Project.new(input[0], input[1], input[2], input[3], input[4])
  if project.save
    puts "#{input[0]} has been added."
  else
    puts project.errors
    add_project
  end
end

def show_projects
  puts "Please enter a grouping: <cohort>, <student>, or <all>"
  project_selection = gets
  return unless project_selection
  case project_selection.chomp!
  when "cohort"
    puts "Please enter the cohort id"
    cohort_id = gets
    return unless cohort_id
    cohort = Cohort.find_by_id(cohort_id.chomp!)
    if cohort.nil?
      puts "No records found for #{cohort}"
      return
    end
    header_to_s("#{cohort.title} projects")
    Student.projects_from_cohort(cohort).map { |project| puts "#{Student.join_to_s(project)}" }
  when "student"
    puts "please enter the student's first name"
    first = gets
    return unless first
    puts "please enter the student's last name"
    last = gets
    return unless last
    student = Student.find_by_first_and_last_name(first.capitalize.chomp!, last.capitalize.chomp!)
    if student.nil?
      puts "No records found for #{first.chomp}, #{last.chomp}"
      return
    end
    header_to_s("#{student.first_name} #{student.last_name}'s projects")
    Project.for_student(student).map { |project| puts "#{project.to_s}" }
  else
    header_to_s("projects")
    Project.all.map { |project| puts "#{project.to_s}" }
  end
end

#################### MAIN MENU ####################
def get_menu_selection
  puts menu
  input = gets
  return unless input
  case input.chomp!
  when "1"
    add_cohort
  when "2"
    show_cohorts
  when "3"
    add_student
  when "4"
    show_students
  when "5"
    add_project
  when "6"
    show_projects
  else
    puts "'#{input}' is not a valid selection"
    get_menu_selection
  end
end

def header_to_s(title) 
  puts "_________________________"
  puts "#{title.upcase}".center(25)
  puts "_________________________"
end

def format_input
  user_input = gets
  return unless user_input
  if user_input.chomp! == ""
    get_menu_selection
  else
    user_input = user_input.chomp.split(",").map(&:strip)
  end
end

get_menu_selection
