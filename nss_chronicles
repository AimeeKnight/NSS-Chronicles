#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"

require 'environment'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

require 'cohort'
require 'student'
require 'project'

def menu
<<EOS
What do you want to do?
1. Add Cohort
2. Show Cohorts
3. Add Student
4. Show Students
5. Add Project
6. Show Projects
EOS
end

#################### COHORT #################### 
def add_cohort
  puts "Please enter the cohort as: title, language 1/language 2, term"
  cohort_input = gets
  return unless cohort_input
  cohort_input = cohort_input.chomp.split(",").map(&:strip)
  cohort = Cohort.new(cohort_input[0], cohort_input[1], cohort_input[2])
  if cohort.save
    puts "#{cohort_input[0]} has been added."
  else
    puts cohort.errors
    add_cohort
  end
end

def show_cohorts
  puts "COHORTS"
  Cohort.all.map { |cohort| puts "#{cohort.to_s}"}
end

#################### STUDENT #################### 
def add_student
  puts "Please enter the student as first name, last name, cohort id"
  student_input = gets
  return unless student_input
  student_input = student_input.chomp.split(",").map(&:strip)
  student = Student.new(student_input[0], student_input[1], student_input[2])
  if student.save
    puts "#{student_input[0]} has been added."
  else
    puts student.errors
    add_student
  end
end

def show_students
  puts "please enter a grouping: <cohort>, <alumni>, <current>, or <all>"
  student_selection = gets
  return unless student_selection
  student_selection.chomp!
  case student_selection
  when "cohort"
    puts "please enter the cohort id"
    cohort_id = gets
    return unless cohort_id
    cohort_id.chomp!
    cohort = Cohort.find_by_id(cohort_id)
    puts "_________________________"
    puts "#{cohort.title.upcase} STUDENTS".center(25)
    puts "_________________________"
    Student.for_cohort(cohort).map { |student| puts "#{student.to_s}" }
  when "alumni"
    puts "_________________________"
    puts "ALUMNI".center(25)
    puts "_________________________"
    Student.alumni.map { |student| puts "#{student.to_s}" }
  when "current"
    puts "_________________________"
    puts "CURRENT STUDENTS".center(25)
    puts "_________________________"
    Student.current.map { |student| puts "#{student.to_s}" }
  else
    puts "_________________________"
    puts "STUDENTS".center(25)
    puts "_________________________"
    Student.all.map { |student| puts "#{student.to_s}"}
  end
end

#################### PROJECT #################### 
def add_project
  puts "Please enter the project as: title, primary language, student id, github url, hosted url"
  project_input = gets
  return unless project_input
  project_input = project_input.chomp.split(",").map(&:strip)
  project = Project.new(project_input[0], project_input[1], project_input[2], project_input[3], project_input[4])
  if project.save
    puts "#{project_input[0]} has been added."
  else
    puts project.errors
    add_project
  end
end

def show_projects
  puts "please enter a grouping: <cohort>, <student>, or <all>"
  project_selection = gets
  return unless project_selection
  project_selection.chomp!
  case project_selection
  when "cohort"
    puts "please enter the cohort id"
    cohort_id = gets
    return unless cohort_id
    cohort = Cohort.find_by_id(cohort_id.chomp!)
    puts "_________________________"
    puts "#{cohort.title.upcase} PROJECTS".center(25)
    puts "_________________________"
    Student.for_project(cohort).map { |project| puts "#{Student.join_to_s(project)}" }
  when "student"
    puts "please enter the student id"
    student_id = gets
    return unless  student_id
    student = Student.find_by_id(student_id.chomp!)
    puts "_________________________"
    puts "#{student.first_name.upcase} #{student.last_name.upcase}'S PROJECTS".center(25)
    puts "_________________________"
    Project.for_student(student).map { |project| puts "#{project.to_s}" }
  else
    puts "_________________________"
    puts "PROJECTS".center(25)
    puts "_________________________"
    Project.all.map { |project| puts "#{project.to_s}" }
  end
end

#################### MAIN MENU #################### 
def get_menu_selection
  puts menu
  input = gets
  return unless input
  input.chomp!
  case input
  when "1"
    add_cohort
  when "2"
    show_cohorts
  when "3"
    add_student
  when "4"
    show_students
  when "5"
    add_project
  when "6"
    show_projects
  else
    puts "'#{input}' is not a valid selection"
    get_menu_selection
  end
end

get_menu_selection
