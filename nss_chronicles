#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"
$LOAD_PATH << "controllers"

require 'environment'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

#require 'cohort'
#require 'cohorts'
#require 'student'
#require 'project'

def menu
<<EOS
What do you want to do?
<1> Add Cohort
<2> Show Cohorts
<3> Add Student
<4> Show Students
<5> Add Project
<6> Show Projects
<7> Quit
EOS
end

#################### COHORT ####################
def add_cohort
  puts "Please enter the cohort as: title, language 1/language 2, term"
  puts "or press enter to return to the main menu"
  input = format_input
  if input.nil?
    add_cohort
  else
    cohort = Cohort.new(title: input[0], languages: input[1], term: input[2])
    handle_save(cohort, input, :title) { add_cohort }
  end
end

def show_cohorts
  header_to_s("cohorts")
  Cohort.all.map { |cohort| puts "#{cohort.to_s}"}
end

#################### STUDENT #################### 
def add_student
  puts "Please enter the student as first name, last name, cohort id"
  puts "or press enter to return to the main menu"
  input = format_input
  if input.nil?
    add_student
  else
    student = Student.new(first_name: input[0], last_name: input[1], cohort_id: input[2])
    handle_save(student, input, :first_name) { add_student }
  end
end

def show_students
  puts "Please enter a grouping: <cohort>, <alumni>, <current>, <all> or, press enter to return to the main menu"
  selection = get_selection
  case selection
  when "cohort"
    puts "please enter the cohort id, or press enter to return to the main menu"
    input = format_input
    cohort = Cohort.find_by_id(input[0])
    return unless results?(cohort)
    header_to_s("#{cohort.title} students")
    cohort.students.map { |student| puts "#{student.to_s}" }
  when "alumni"
    header_to_s("alumni")
    Student.alumni.map { |student| puts "#{student.to_s}" }
  when "current"
    header_to_s("current students")
    Student.current.map { |student| puts "#{student.to_s}" }
  when "all"
    header_to_s("students")
    Student.all.map { |student| puts "#{student.to_s}"}
  else
    get_menu_selection
  end
end

#################### PROJECT ####################
def add_project
  puts "Please enter the project as: title, primary language, student id, github url, hosted url"
  input = format_input
  if input.nil?
    add_project
  else
    project = Project.new(title: input[0], language: input[1], student_id: input[2], github_url: input[3], hosted_url: input[4])
    handle_save(project, input, :title) { add_project }
  end
end

def show_projects
  puts "Please enter a grouping: <cohort>, <student>, or <all>"
  selection = get_selection
  case selection
  when "cohort"
    puts "please enter the cohort id, or press enter to return to the main menu"
    input = format_input
    cohort = Cohort.find_by_id(input[0])
    return unless results?(cohort)
    header_to_s("#{cohort.title} projects")
    cohort.projects.map { |project| puts "#{project.to_s}" }
  when "student"
    name = get_full_name
    student = Student.find_by_first_and_last_name(name[0].capitalize.chomp!, name[1].capitalize.chomp!).first
    return unless results?(student)
    header_to_s("#{student.first_name} #{student.last_name}'s projects")
    student.projects.map { |project| puts "#{project.to_s}" }
  when "all"
    header_to_s("projects")
    Project.all.map { |project| puts "#{project.to_s}" }
  else
    get_menu_selection
  end
end

#################### MAIN MENU ####################
def get_menu_selection
  puts menu
  input = gets
  return unless input
  case input.chomp!
  when "1"
    add_cohort
  when "2"
    show_cohorts
  when "3"
    add_student
  when "4"
    show_students
  when "5"
    add_project
  when "6"
    show_projects
  when "7"
    return
  else
    puts "'#{input}' is not a valid selection"
    get_menu_selection
  end
end

def header_to_s(title) 
  puts "_________________________"
  puts "#{title.upcase}".center(25)
  puts "_________________________"
end

def format_input
  user_input = gets
  if user_input.nil?
    get_menu_selection
  elsif user_input.chomp! == ""
    get_menu_selection
  else
    user_input = user_input.chomp.split(",").map(&:strip)
  end
end

def get_selection
  selection = gets
  if selection.nil?
    selection = "invalid"
  elsif
    selection.chomp == ""
    selection = "invalid"
  else
    selection = selection.chomp!
  end
  selection
end

def get_full_name
  full_name = []
  puts "please enter the student's first name"
  first = gets
  full_name << first
  puts "please enter the student's last name"
  last = gets
  full_name << last
end

def results?(results)
  if results.nil?
    puts "No records found"
    false
  else
    true
  end
end

def handle_save(record, input, attribute)
  if record.save
    puts "#{input[0]} has been added."
  else
    puts record.errors[attribute]
    yield
  end
end

get_menu_selection
